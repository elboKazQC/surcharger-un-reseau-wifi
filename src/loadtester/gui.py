"""Interface graphique Tkinter pour tester progressivement les niveaux de charge."""

from __future__ import annotations

import asyncio
import threading
import tkinter as tk
from tkinter import ttk, messagebox
from dataclasses import dataclass
from datetime import datetime
from pathlib import Path
from typing import Optional

from .config import FullConfig, GlobalConfig, TierConfig
from .runner import LoadTestRunner
from .report import TierReportRow


@dataclass
class LevelDefinition:
    """D√©finition d'un niveau de test."""
    level: int
    name: str
    protocol: str
    target_mbps: float
    connections: int
    duration_s: int
    packet_size: int


# Niveaux pr√©d√©finis progressifs
PREDEFINED_LEVELS = [
    LevelDefinition(1, "Niveau 1 - L√©ger", "UDP", 5, 1, 10, 512),
    LevelDefinition(2, "Niveau 2 - Faible", "UDP", 10, 2, 15, 512),
    LevelDefinition(3, "Niveau 3 - Mod√©r√©", "TCP", 20, 2, 15, 1024),
    LevelDefinition(4, "Niveau 4 - Moyen", "UDP", 30, 3, 20, 1024),
    LevelDefinition(5, "Niveau 5 - √âlev√©", "TCP", 40, 4, 20, 1024),
    LevelDefinition(6, "Niveau 6 - Intense", "UDP", 50, 5, 25, 1024),
    LevelDefinition(7, "Niveau 7 - Tr√®s Intense", "TCP", 60, 6, 25, 1024),
    LevelDefinition(8, "Niveau 8 - Extr√™me", "UDP", 80, 8, 30, 1024),
    LevelDefinition(9, "Niveau 9 - Critique", "TCP", 100, 10, 30, 1024),
    LevelDefinition(10, "Niveau 10 - Maximum", "UDP", 120, 12, 30, 1024),
]


class LoadTesterGUI:
    """Interface graphique principale."""

    def __init__(self, root: tk.Tk):
        self.root = root
        self.root.title("WiFi Load Tester - Test Progressif AMR")
        self.root.geometry("900x700")
        
        # Configuration par d√©faut
        self.target_host = tk.StringVar(value="192.168.1.10")
        self.safety_max = tk.StringVar(value="150")
        self.current_level = 0
        self.test_running = False
        self.last_result: Optional[TierReportRow] = None
        self.results_history: list[TierReportRow] = []
        
        self._setup_ui()
    
    def _setup_ui(self):
        """Configure l'interface utilisateur."""
        # Frame configuration
        config_frame = ttk.LabelFrame(self.root, text="Configuration", padding=10)
        config_frame.pack(fill="x", padx=10, pady=5)
        
        ttk.Label(config_frame, text="H√¥te cible:").grid(row=0, column=0, sticky="w", padx=5)
        ttk.Entry(config_frame, textvariable=self.target_host, width=20).grid(row=0, column=1, padx=5)
        
        ttk.Label(config_frame, text="Limite s√©curit√© (Mbps):").grid(row=0, column=2, sticky="w", padx=5)
        ttk.Entry(config_frame, textvariable=self.safety_max, width=10).grid(row=0, column=3, padx=5)
        
        # Frame des niveaux
        levels_frame = ttk.LabelFrame(self.root, text="Niveaux de Test", padding=10)
        levels_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        # Cr√©er grille de boutons (2 colonnes)
        self.level_buttons = []
        for i, level_def in enumerate(PREDEFINED_LEVELS):
            row = i // 2
            col = i % 2
            
            btn_frame = ttk.Frame(levels_frame)
            btn_frame.grid(row=row, column=col, padx=5, pady=5, sticky="ew")
            
            btn = ttk.Button(
                btn_frame,
                text=f"üöÄ {level_def.name}",
                command=lambda lv=level_def: self._run_level(lv),
                width=35
            )
            btn.pack(side="left", fill="x", expand=True)
            
            # Label pour status
            status_label = ttk.Label(btn_frame, text="‚ö™", font=("Arial", 12))
            status_label.pack(side="left", padx=5)
            
            self.level_buttons.append((btn, status_label))
        
        # Configurer expansion des colonnes
        levels_frame.columnconfigure(0, weight=1)
        levels_frame.columnconfigure(1, weight=1)
        
        # Frame r√©sultats en temps r√©el
        results_frame = ttk.LabelFrame(self.root, text="R√©sultats du dernier test", padding=10)
        results_frame.pack(fill="x", padx=10, pady=5)
        
        self.results_text = tk.Text(results_frame, height=8, wrap="word", font=("Consolas", 9))
        self.results_text.pack(fill="both", expand=True)
        self.results_text.insert("1.0", "Aucun test lanc√©.\n")
        self.results_text.config(state="disabled")
        
        # Frame boutons d'action
        action_frame = ttk.Frame(self.root, padding=5)
        action_frame.pack(fill="x", padx=10, pady=5)
        
        ttk.Button(action_frame, text="üìä Voir rapport complet", command=self._show_full_report).pack(side="left", padx=5)
        ttk.Button(action_frame, text="üî• Mode Stress", command=self._open_stress_dialog).pack(side="left", padx=5)
        ttk.Button(action_frame, text="üîÑ R√©initialiser", command=self._reset).pack(side="left", padx=5)
        ttk.Button(action_frame, text="‚ùå Quitter", command=self.root.quit).pack(side="right", padx=5)
        
        # Barre de statut
        self.status_var = tk.StringVar(value="Pr√™t - Cliquez sur un niveau pour commencer")
        status_bar = ttk.Label(self.root, textvariable=self.status_var, relief="sunken", anchor="w")
        status_bar.pack(side="bottom", fill="x")
    
    def _run_level(self, level_def: LevelDefinition):
        """Lance le test pour un niveau donn√©."""
        if self.test_running:
            messagebox.showwarning("Test en cours", "Un test est d√©j√† en cours d'ex√©cution.")
            return
        
        # V√©rifier limite de s√©curit√©
        try:
            safety_limit = float(self.safety_max.get())
            if level_def.target_mbps > safety_limit:
                if not messagebox.askyesno(
                    "D√©passement limite",
                    f"Ce niveau ({level_def.target_mbps} Mbps) d√©passe la limite de s√©curit√© ({safety_limit} Mbps).\n\nContinuer quand m√™me?"
                ):
                    return
        except ValueError:
            messagebox.showerror("Erreur", "Limite de s√©curit√© invalide.")
            return
        
        self.test_running = True
        self.current_level = level_def.level
        self._update_button_status(level_def.level - 1, "running")
        self.status_var.set(f"‚è≥ Test en cours: {level_def.name}...")
        
        # Lancer le test dans un thread s√©par√©
        thread = threading.Thread(target=self._run_test_thread, args=(level_def,), daemon=True)
        thread.start()
    
    def _run_test_thread(self, level_def: LevelDefinition):
        """Ex√©cute le test dans un thread s√©par√©."""
        try:
            # Cr√©er config temporaire
            global_cfg = GlobalConfig(
                target_host=self.target_host.get(),
                ping_host=self.target_host.get(),
                safety_max_mbps=float(self.safety_max.get()),
                output_dir="reports",
                use_iperf_if_available=True,
            )
            
            tier = TierConfig(
                name=level_def.name,
                protocol=level_def.protocol,
                target_bandwidth_mbps=level_def.target_mbps,
                connections=level_def.connections,
                duration_s=level_def.duration_s,
                packet_size=level_def.packet_size,
            )
            
            full_cfg = FullConfig(global_cfg, [tier])
            runner = LoadTestRunner(full_cfg, dry_run=False, internal_only=False)
            
            # Ex√©cuter dans event loop asyncio
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            reporter = loop.run_until_complete(runner.run())
            loop.close()
            
            # R√©cup√©rer le r√©sultat
            if reporter.rows:
                result = reporter.rows[0]
                self.last_result = result
                self.results_history.append(result)
                
                # Mettre √† jour l'UI depuis le thread principal
                self.root.after(0, lambda: self._display_result(level_def, result))
            else:
                self.root.after(0, lambda: self._display_error(level_def, "Aucun r√©sultat retourn√©"))
        
        except Exception as e:
            self.root.after(0, lambda: self._display_error(level_def, str(e)))
        
        finally:
            self.test_running = False
    
    def _display_result(self, level_def: LevelDefinition, result: TierReportRow):
        """Affiche les r√©sultats dans l'interface."""
        # D√©terminer le statut (succ√®s/warning/√©chec)
        status = self._analyze_result(result)
        
        self._update_button_status(level_def.level - 1, status)
        
        # Mise √† jour texte r√©sultats
        self.results_text.config(state="normal")
        self.results_text.delete("1.0", "end")
        
        report_lines = [
            f"{'='*70}",
            f"  {level_def.name} - R√©sultats",
            f"{'='*70}",
            f"",
            f"‚öôÔ∏è  Configuration:",
            f"   ‚Ä¢ Protocole: {result.protocol}",
            f"   ‚Ä¢ D√©bit cible: {result.target_mbps:.1f} Mbps",
            f"   ‚Ä¢ D√©bit atteint: {result.achieved_mbps:.1f} Mbps ({result.achieved_mbps/result.target_mbps*100:.0f}%)",
            f"",
            f"üìä M√©triques r√©seau:",
            f"   ‚Ä¢ Latence moyenne: {result.latency_ms_avg:.2f} ms",
            f"   ‚Ä¢ Gigue (jitter): {result.jitter_ms:.2f} ms",
            f"   ‚Ä¢ Perte de paquets: {result.packet_loss_pct:.1f}%",
            f"",
            f"üíª Ressources syst√®me:",
            f"   ‚Ä¢ CPU: {result.cpu_pct_avg:.1f}%",
            f"   ‚Ä¢ RAM: {result.mem_pct_avg:.1f}%",
            f"",
        ]
        
        # Ajout d'alertes si probl√®mes d√©tect√©s
        warnings = []
        if result.packet_loss_pct > 5:
            warnings.append(f"‚ö†Ô∏è  ATTENTION: Perte de paquets √©lev√©e ({result.packet_loss_pct:.1f}%)")
        if result.latency_ms_avg > 100:
            warnings.append(f"‚ö†Ô∏è  ATTENTION: Latence √©lev√©e ({result.latency_ms_avg:.0f} ms)")
        if result.achieved_mbps < result.target_mbps * 0.7:
            warnings.append(f"‚ö†Ô∏è  ATTENTION: D√©bit insuffisant (seulement {result.achieved_mbps/result.target_mbps*100:.0f}% de la cible)")
        if result.jitter_ms > 30:
            warnings.append(f"‚ö†Ô∏è  ATTENTION: Gigue importante ({result.jitter_ms:.1f} ms)")
        
        if warnings:
            report_lines.append("üö® ALERTES:")
            for w in warnings:
                report_lines.append(f"   {w}")
            report_lines.append("")
        else:
            report_lines.append("‚úÖ Aucun probl√®me d√©tect√© - R√©seau stable")
        
        self.results_text.insert("1.0", "\n".join(report_lines))
        self.results_text.config(state="disabled")
        
        # Mise √† jour statut
        if status == "error":
            self.status_var.set(f"‚ùå {level_def.name} - Syst√®me en difficult√©!")
            messagebox.showwarning(
                "Difficult√©s d√©tect√©es",
                f"Le niveau {level_def.level} montre des difficult√©s significatives!\n\n" +
                "\n".join(warnings)
            )
        elif status == "warning":
            self.status_var.set(f"‚ö†Ô∏è  {level_def.name} - Probl√®mes d√©tect√©s")
        else:
            self.status_var.set(f"‚úÖ {level_def.name} - Compl√©t√© avec succ√®s")
    
    def _display_error(self, level_def: LevelDefinition, error: str):
        """Affiche une erreur."""
        self._update_button_status(level_def.level - 1, "error")
        self.status_var.set(f"‚ùå Erreur lors du test {level_def.name}")
        
        self.results_text.config(state="normal")
        self.results_text.delete("1.0", "end")
        self.results_text.insert("1.0", f"‚ùå ERREUR:\n\n{error}")
        self.results_text.config(state="disabled")
        
        messagebox.showerror("Erreur", f"Erreur lors du test:\n{error}")

    # ------------------ Stress Mode ------------------
    def _open_stress_dialog(self):
        if self.test_running:
            messagebox.showwarning("Occup√©", "Attendez la fin du test courant.")
            return
        win = tk.Toplevel(self.root)
        win.title("Mode Stress - Param√®tres")
        vars_ = {
            'start': tk.StringVar(value='5'),
            'step': tk.StringVar(value='10'),
            'maxv': tk.StringVar(value='150'),
            'duration': tk.StringVar(value='15'),
            'protocol': tk.StringVar(value='BOTH'),
            'connections': tk.StringVar(value='4'),
        }
        labels = [
            ("D√©bit initial (Mbps)", 'start'),
            ("Incr√©ment (Mbps)", 'step'),
            ("D√©bit max (Mbps)", 'maxv'),
            ("Dur√©e palier (s)", 'duration'),
            ("Protocol (UDP/TCP/BOTH)", 'protocol'),
            ("Connexions", 'connections'),
        ]
        for i,(lab,key) in enumerate(labels):
            ttk.Label(win, text=lab).grid(row=i, column=0, sticky='w', padx=5, pady=2)
            ttk.Entry(win, textvariable=vars_[key], width=12).grid(row=i, column=1, padx=5, pady=2)
        ttk.Button(win, text="D√©marrer", command=lambda: (win.destroy(), self._start_stress(vars_))).grid(row=len(labels), column=0, columnspan=2, pady=10)

    def _start_stress(self, vars_):
        try:
            start = float(vars_['start'].get())
            step = float(vars_['step'].get())
            maxv = float(vars_['maxv'].get())
            duration = int(vars_['duration'].get())
            protocol = vars_['protocol'].get().upper()
            connections = int(vars_['connections'].get())
        except ValueError:
            messagebox.showerror("Erreur", "Param√®tres invalides")
            return
        self.status_var.set("‚è≥ Stress en cours...")
        self.test_running = True
        thread = threading.Thread(target=self._run_stress_thread, args=(start, step, maxv, duration, protocol, connections), daemon=True)
        thread.start()

    def _run_stress_thread(self, start, step, maxv, duration, protocol, connections):
        from .stress import parse_args as stress_parse_args, stress, write_report
        import types, logging
        # Construire un objet args minimal
        args = types.SimpleNamespace(
            host=self.target_host.get(),
            ping_host=self.target_host.get(),
            start_mbps=start,
            step_mbps=step,
            max_mbps=maxv,
            duration=duration,
            protocol=protocol,
            connections=connections,
            packet_size=1024,
            loss_threshold=10.0,
            latency_threshold=200.0,
            min_ratio=0.6,
            output_dir='reports',
            no_iperf=True,
        )
        logging.getLogger().setLevel(logging.INFO)
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            results = loop.run_until_complete(stress(args))
            path = write_report(results, args.output_dir)
            loop.close()
            # Synth√®se
            summary = [f"Stress test termin√©. Rapport: {path}"]
            for r in results:
                summary.append(f"Lvl{r.level} {r.protocol} target={r.target_mbps} achieved={r.achieved_mbps:.1f} latency={r.latency_ms:.1f} loss={r.loss_pct:.1f}% status={r.status}")
            text = "\n".join(summary)
            self.root.after(0, lambda: self._stress_done(text))
        except Exception as e:
            self.root.after(0, lambda: self._stress_done(f"Erreur stress: {e}"))
        finally:
            self.test_running = False

    def _stress_done(self, text: str):
        self.results_text.config(state='normal')
        self.results_text.delete('1.0', 'end')
        self.results_text.insert('1.0', text + "\n")
        self.results_text.config(state='disabled')
        self.status_var.set("‚úÖ Stress termin√©")
    
    def _analyze_result(self, result: TierReportRow) -> str:
        """Analyse le r√©sultat et retourne le statut (success/warning/error)."""
        # Crit√®res d'√©chec critique
        if (result.packet_loss_pct > 10 or 
            result.latency_ms_avg > 200 or 
            result.achieved_mbps < result.target_mbps * 0.5):
            return "error"
        
        # Crit√®res d'avertissement
        if (result.packet_loss_pct > 3 or 
            result.latency_ms_avg > 80 or 
            result.jitter_ms > 30 or
            result.achieved_mbps < result.target_mbps * 0.8):
            return "warning"
        
        return "success"
    
    def _update_button_status(self, index: int, status: str):
        """Met √† jour le statut visuel d'un bouton."""
        if 0 <= index < len(self.level_buttons):
            _, status_label = self.level_buttons[index]
            if status == "running":
                status_label.config(text="‚è≥", foreground="blue")
            elif status == "success":
                status_label.config(text="‚úÖ", foreground="green")
            elif status == "warning":
                status_label.config(text="‚ö†Ô∏è", foreground="orange")
            elif status == "error":
                status_label.config(text="‚ùå", foreground="red")
    
    def _show_full_report(self):
        """Affiche un rapport complet de tous les tests."""
        if not self.results_history:
            messagebox.showinfo("Rapport", "Aucun test effectu√© pour le moment.")
            return
        
        report_window = tk.Toplevel(self.root)
        report_window.title("Rapport Complet")
        report_window.geometry("800x600")
        
        text = tk.Text(report_window, wrap="word", font=("Consolas", 9))
        scrollbar = ttk.Scrollbar(report_window, command=text.yview)
        text.config(yscrollcommand=scrollbar.set)
        
        scrollbar.pack(side="right", fill="y")
        text.pack(fill="both", expand=True)
        
        # G√©n√©rer rapport
        lines = [
            "="*80,
            " RAPPORT COMPLET DES TESTS",
            "="*80,
            f"Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}",
            f"Nombre de tests: {len(self.results_history)}",
            "",
        ]
        
        for i, result in enumerate(self.results_history, 1):
            lines.extend([
                f"\n{'='*80}",
                f"Test #{i}: {result.tier_name}",
                f"{'='*80}",
                f"Protocole: {result.protocol}",
                f"Cible: {result.target_mbps:.1f} Mbps | Atteint: {result.achieved_mbps:.1f} Mbps",
                f"Latence: {result.latency_ms_avg:.2f} ms | Gigue: {result.jitter_ms:.2f} ms",
                f"Perte: {result.packet_loss_pct:.1f}% | CPU: {result.cpu_pct_avg:.1f}% | RAM: {result.mem_pct_avg:.1f}%",
            ])
        
        text.insert("1.0", "\n".join(lines))
        text.config(state="disabled")
    
    def _reset(self):
        """R√©initialise l'interface."""
        if messagebox.askyesno("R√©initialiser", "Voulez-vous effacer tous les r√©sultats?"):
            self.results_history.clear()
            self.last_result = None
            self.current_level = 0
            
            for _, status_label in self.level_buttons:
                status_label.config(text="‚ö™", foreground="black")
            
            self.results_text.config(state="normal")
            self.results_text.delete("1.0", "end")
            self.results_text.insert("1.0", "R√©sultats r√©initialis√©s.\n")
            self.results_text.config(state="disabled")
            
            self.status_var.set("Pr√™t - Cliquez sur un niveau pour commencer")


def main():
    """Point d'entr√©e de l'interface graphique."""
    root = tk.Tk()
    app = LoadTesterGUI(root)
    root.mainloop()


if __name__ == "__main__":
    main()
